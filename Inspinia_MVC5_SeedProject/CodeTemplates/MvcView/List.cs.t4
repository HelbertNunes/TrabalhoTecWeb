<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Lista de <#= ViewDataTypeShortName #></h5>
					<div class="ibox-tools">
						@Html.ActionLink("Novo", "Create", null, new { @class = "btn btn-primary btn-sm"})
					</div>
                </div>
                <div class="ibox-content">

<table class="table table-striped table-bordered dataTables-example" id="TableIndex">
	<thead>
    <tr>
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // This is a temporary work around until core scaffolding provides support for independent associations.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <th>
            @Html.DisplayNameFor(model => model.<#= GetValueExpression(property) #>)
        </th>
<#
    }
}
#>
        <th></th>
    </tr>
	</thead>
	<tbody>

@foreach (var item in Model) {
    <tr>
<#
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // This is a temporary work around until core scaffolding provides support for independent associations.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <td>
            @Html.DisplayFor(modelItem => <#= "item." + GetValueExpression(property) #>)
        </td>
<#
    }
}

string pkName = GetPrimaryKeyName();
if (pkName != null) {
#>
        <td>
            <a title="Editar" class="btn btn-info btn-xs" href="@(ViewBag.routePrefix)Edit/@item.Id"><i class='fa fa-edit'></i></a>
            <a title="Excluir" class="btn btn-danger btn-xs" href="@(ViewBag.routePrefix)Delete/@item.Id"><i class='fa fa-trash'></i></a>
        </td>
<#
} else {
#>
        <td>
            <a title="Editar" class="btn btn-info btn-xs" href="@(ViewBag.routePrefix)Edit/@item.Id"><i class='fa fa-edit'></i></a>
            <a title="Excluir" class="btn btn-danger btn-xs" href="@(ViewBag.routePrefix)Delete/@item.Id"><i class='fa fa-trash'></i></a>

        </td>
<#
}
#>
    </tr>
}
</tbody>
</table>

                </div>
            </div>
        </div>
    </div>
 </div>



<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>


@section Scripts {

    <script type="text/javascript">
        $(document).ready(function () {
			$("body").toggleClass("mini-navbar");
			SmoothlyMenu();

			<#
				int qtd = properties.Count()-1;
				string EstadoCivil= "";
				for(int x = 0; x<qtd;x++) {
					EstadoCivil += x.ToString("0") + ",";
				}
			#>
			


            $('#TableIndex').DataTable({
                dom: '<"html5buttons"B>lTfgitp',
				order: [],
                language: { url: "//cdn.datatables.net/plug-ins/1.10.12/i18n/Portuguese-Brasil.json"},
                buttons: [
                    {
                        extend: 'copy',
                        exportOptions: { columns: [<#=EstadoCivil#>]}
                    },
                    {
                        extend: 'csv',
                        exportOptions: { columns: [<#=EstadoCivil#>] }
                    },
                    {
                        extend: 'excel',
                        exportOptions: { columns: [<#=EstadoCivil#>] }
                    },
                    {
                        extend: 'pdf',
                        exportOptions: { columns: [<#=EstadoCivil#>] }
                    },

                    {
                        extend: 'print',
                        customize: function (win) {
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');

                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        }
                    }
                ],
                "aoColumns": [
<#
for(int x = 0; x<qtd-1;x++) {
#>
                  { "bSortable": true },
<#
}
#>
                  { "bSortable": false, "bSearchable": false }
                ]

            });

        });
    </script>
}

